import sys
import os
import time
import json
import hashlib
import yara

try:
    from tkinter import *
except ImportError:
    from Tkinter import *

try:
    from winreg import *
except ImportError:
    from _winreg import *

try:
    import tkFileDialog as filedialog
except ImportError:
    from tkinter import filedialog


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("457x352+543+149")
        top.minsize(120, 1)
        top.maxsize(2736, 749)
        top.resizable(1, 1)
        top.title("Mal-Detect")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.547, rely=0.341, height=34, width=97)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
#        self.Button1.configure(command=self.deep_scan)
        self.Button1.configure(command=self.scan)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Scan''')

#        self.Button2 = tk.Button(top)
#        self.Button2.place(relx=0.284, rely=0.341, height=34, width=97)
#        self.Button2.configure(activebackground="#ececec")
#        self.Button2.configure(activeforeground="#000000")
#        self.Button2.configure(background="#d9d9d9")
#        self.Button2.configure(command=self.quick_scan)
#        self.Button2.configure(disabledforeground="#a3a3a3")
#        self.Button2.configure(foreground="#000000")
#        self.Button2.configure(highlightbackground="#d9d9d9")
#        self.Button2.configure(highlightcolor="black")
#        self.Button2.configure(pady="0")
#        self.Button2.configure(text='''Quick scan''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.328, rely=0.085, height=21, width=134)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Malware detection tool''')

        self.historyText = tk.Text(top)
        self.historyText.place(relx=0.0, rely=0.511, relheight=0.489
                               , relwidth=0.993)
        self.historyText.configure(background="white")
        self.historyText.configure(font="TkFixedFont")
        self.historyText.configure(foreground="#000000")
        self.historyText.configure(highlightbackground="#d9d9d9")
        self.historyText.configure(highlightcolor="black")
        self.historyText.configure(selectbackground="#c4c4c4")
        self.historyText.configure(selectforeground="black")

        self.Text1 = tk.Text(top)
        self.Text1.place(relx=0.205, rely=0.227, relheight=0.068, relwidth=0.6)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(wrap="word")
        self.Text1.config(state="disabled")

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.805, rely=0.227, height=24, width=20)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(command=self.choose_folder)
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''...''')

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.284, rely=0.341, height=34, width=97)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(command=self.remove_history)
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Remove log''')

    def choose_folder(self):
        self.Text1.config(state="normal")
        self.Text1.delete(1.0, tk.END)
        global folder_path
        folder_path = tk.StringVar()
        filename = filedialog.askdirectory()
        folder_path.set(filename)
        self.Text1.insert("end-1c", filename)
        self.Text1.config(state="disabled")

    def set_text(self, text):
        self.historyText.config(state="normal")
        self.historyText.insert(tk.INSERT, text + "\n")
        self.historyText.config(state="disabled")

    def remove_history(self):
        self.historyText.config(state="normal")
        self.historyText.delete(1.0, tk.END)
        self.historyText.config(state="disabled")

    # perform behavior-based detection
#    def deep_scan(self):
#        self.set_text("Deep scan activated!!")
#        self.handle_delete()

    def check_file_exist(self, path):
        return os.path.isfile(path)

    def check_path_exist(self, path):
        return os.path.exists(path)

    def delete_file(self, path):
        os.remove(path)

    def read_file_json(self):
        with open('data.json') as json_file:
            data = json.load(json_file)
            return data

    def read_yara_rules(self):
        rules = yara.compile(filepath='malware_index.yar')
        return rules

    # perform quick scan:
    def scan(self):
        self.set_text("Scan activated!!")
        path = self.Text1.get(1.0, END)
        self.handle__scan(path)

    def hash_function(self, filename):
        md5 = hashlib.md5()
        with open(filename, 'rb') as f:
            buf = f.read()
            # MD-5
            md5.update(buf)
        return md5.hexdigest()

    def handle_scan(self, path):
        path = path.replace('/', '\\')
        path = path.replace('\n', '')
        if self.check_path_exist(path) == False:
            self.set_text('Invalid folder path!')
        else:
            t_s = time.time()
            rules = self.read_yara_rules()
            count = 0
            fil = ''
            for r, d, f in os.walk(path):
                for file in f:
                    if file.endswith("exe"):
                        fil = os.path.join(r, file)
                        try:
                            matches = rules.match(fil)
                            if matches:
                                self.set_text('Virus ' + data_el['name'] + ' found!')
                                self.set_text('Deleting ' + 'virus ' + data_el['name'])
                                self.delete_file(fil)
                                self.set_text('Deleted file : ' + fil + ' successfully!')
                                count += 1

                        except:
                            pass
            if count == 0:
                self.set_text('No malicious file detected')
            else:
                pass
            self.set_text("Number of identified malwares: " + str(count))
            t_e = time.time()
            timeScanned = round((t_e - t_s), 3)
            self.set_text('Time scanned: ' + str(timeScanned) + 's')

    def handle__scan(self, path):
        path = path.replace('/', '\\')
        path = path.replace('\n', '')
        if self.check_path_exist(path) == False:
            self.set_text('Invalid folder path!')
        else:
            t_s = time.time()
            data = self.read_file_json()
            count = 0
            fil = ''
            for r, d, f in os.walk(path):
                for file in f:
                    if file.endswith("exe"):
                        fil = os.path.join(r, file)
                        for data_el in data:
                            h = self.hash_function(fil)
                            if h == data_el['md5']:
                                self.set_text('Virus ' + data_el['name'] + ' found!')
                                self.set_text('Deleting ' + 'virus ' + data_el['name'])
                                self.delete_file(fil)
                                self.set_text('Deleted file : ' + fil + ' successfully!')
                                count += 1
                                break

            if count == 0:
                self.set_text('No malicious file detected')
            else:
                pass
            self.set_text("Number of identified malwares: " + str(count))
            t_e = time.time()
            timeScanned = round((t_e - t_s), 3)
            self.set_text('Time scanned: ' + str(timeScanned) + 's')

if __name__ == '__main__':
    vp_start_gui()




